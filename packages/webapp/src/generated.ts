// Generated by @wagmi/cli@0.1.11 on 3/4/2023 at 4:39:51 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CardsCollection
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cardsCollectionABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'lore',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'flavor', internalType: 'string', type: 'string' },
      { name: 'URL', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenID', internalType: 'uint256', type: 'uint256' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'flavor', internalType: 'string', type: 'string' },
      { name: 'URL', internalType: 'string', type: 'string' },
      { name: 'attack', internalType: 'uint8', type: 'uint8' },
      { name: 'defense', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'card', internalType: 'uint256', type: 'uint256' }],
    name: 'stats',
    outputs: [
      {
        name: '',
        internalType: 'struct Stats',
        type: 'tuple',
        components: [
          { name: 'attack', internalType: 'uint8', type: 'uint8' },
          { name: 'defense', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DeployLocal
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployLocalABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vm',
    outputs: [{ name: '', internalType: 'contract Vm', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DeployPublic
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployPublicABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vm',
    outputs: [{ name: '', internalType: 'contract Vm', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Game
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gameABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'inventory_',
        internalType: 'contract Inventory',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'AlreadyJoined' },
  { type: 'error', inputs: [], name: 'AttackerDefenderMismatch' },
  {
    type: 'error',
    inputs: [{ name: 'index', internalType: 'uint8', type: 'uint8' }],
    name: 'AttackerIndexTooHigh',
  },
  { type: 'error', inputs: [], name: 'AttackerNotOnBattlefield' },
  { type: 'error', inputs: [], name: 'CardIndexTooHigh' },
  {
    type: 'error',
    inputs: [{ name: 'index', internalType: 'uint8', type: 'uint8' }],
    name: 'DefenderAttacking',
  },
  {
    type: 'error',
    inputs: [{ name: 'index', internalType: 'uint8', type: 'uint8' }],
    name: 'DefenderIndexTooHigh',
  },
  { type: 'error', inputs: [], name: 'DefenderNotOnBattlefield' },
  { type: 'error', inputs: [], name: 'DuplicateAttacker' },
  { type: 'error', inputs: [], name: 'DuplicateDefender' },
  { type: 'error', inputs: [], name: 'NoGameNoLife' },
  { type: 'error', inputs: [], name: 'PlayerNotInGame' },
  { type: 'error', inputs: [], name: 'WrongAttackTarget' },
  { type: 'error', inputs: [], name: 'WrongNumberOfDecks' },
  { type: 'error', inputs: [], name: 'WrongPlayer' },
  { type: 'error', inputs: [], name: 'WrongProof' },
  { type: 'error', inputs: [], name: 'WrongStep' },
  { type: 'error', inputs: [], name: 'YoullNeverPlayAlone' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'player', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'CardDrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'player', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'card',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CardPlayed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Champion',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'cardIndex',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'CreatureDestroyed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GameCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GameDeclined',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'GameStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attackingPlayer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'defendingPlayer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PlayerAttacked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PlayerConceded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PlayerDefeated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'attackingPlayer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'defendingPlayer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PlayerDefended',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'player', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'PlayerPassed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PlayerTimedOut',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'targetPlayer', internalType: 'uint8', type: 'uint8' },
      { name: 'attacking', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'attack',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cardsCollection',
    outputs: [
      { name: '', internalType: 'contract CardsCollection', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameID', internalType: 'uint256', type: 'uint256' }],
    name: 'concedeGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'players', internalType: 'address[]', type: 'address[]' },
      { name: 'decks', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'createGame',
    outputs: [{ name: 'gameID', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'playerIndex', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'declineGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'defending', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'defend',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'handRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deckRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'drawCard',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inventory',
    outputs: [
      { name: '', internalType: 'contract Inventory', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'handRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deckRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'joinGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gameID', internalType: 'uint256', type: 'uint256' }],
    name: 'pass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'handRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'cardIndex', internalType: 'uint8', type: 'uint8' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'playCard',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'player', internalType: 'address', type: 'address' },
    ],
    name: 'playerData',
    outputs: [
      {
        name: '',
        internalType: 'struct Game.PlayerData',
        type: 'tuple',
        components: [
          { name: 'health', internalType: 'uint16', type: 'uint16' },
          { name: 'deckStart', internalType: 'uint8', type: 'uint8' },
          { name: 'deckEnd', internalType: 'uint8', type: 'uint8' },
          { name: 'handRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'deckRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'battlefield', internalType: 'uint256', type: 'uint256' },
          { name: 'graveyard', internalType: 'uint256', type: 'uint256' },
          { name: 'attacking', internalType: 'uint8[]', type: 'uint8[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'gameID', internalType: 'uint256', type: 'uint256' },
      { name: 'player', internalType: 'address', type: 'address' },
    ],
    name: 'playerDeck',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Integration
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const integrationABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'testGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vm',
    outputs: [{ name: '', internalType: 'contract Vm', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Inventory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const inventoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'deploySalt', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'cardsCollection_',
        internalType: 'contract CardsCollection',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'BigDeckEnergy' },
  {
    type: 'error',
    inputs: [{ name: 'cardID', internalType: 'uint256', type: 'uint256' }],
    name: 'CardNotInInventory',
  },
  {
    type: 'error',
    inputs: [{ name: 'deckID', internalType: 'uint8', type: 'uint8' }],
    name: 'DeckDoesNotExist',
  },
  { type: 'error', inputs: [], name: 'OutOfDeckIDs' },
  { type: 'error', inputs: [], name: 'SmallDeckEnergy' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cardID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CardAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'deckID', internalType: 'uint8', type: 'uint8', indexed: true },
      {
        name: 'cardID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CardAddedToDeck',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'player',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'cardID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CardRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'deckID', internalType: 'uint8', type: 'uint8', indexed: true },
      {
        name: 'cardID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CardRemovedFromDeck',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'deckID', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'DeckAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'deckID', internalType: 'uint8', type: 'uint8', indexed: true },
    ],
    name: 'DeckRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'cardID', internalType: 'uint256', type: 'uint256' }],
    name: 'addCard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'deckID', internalType: 'uint8', type: 'uint8' },
      { name: 'cardID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addCardToDeck',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'deck',
        internalType: 'struct Inventory.Deck',
        type: 'tuple',
        components: [
          { name: 'cards', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
    name: 'addDeck',
    outputs: [{ name: 'deckID', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cardsCollection',
    outputs: [
      { name: '', internalType: 'contract CardsCollection', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'player', internalType: 'address', type: 'address' },
      { name: 'deckID', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'checkDeck',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'player', internalType: 'address', type: 'address' },
      { name: 'deckID', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'getDeck',
    outputs: [
      { name: 'deckCards', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inventoryCardsCollection',
    outputs: [
      {
        name: '',
        internalType: 'contract InventoryCardsCollection',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'cardID', internalType: 'uint256', type: 'uint256' }],
    name: 'removeCard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'deckID', internalType: 'uint8', type: 'uint8' },
      { name: 'index', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'removeCardFromDeck',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'deckID', internalType: 'uint8', type: 'uint8' }],
    name: 'removeDeck',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'deckID', internalType: 'uint8', type: 'uint8' },
      {
        name: 'deck',
        internalType: 'struct Inventory.Deck',
        type: 'tuple',
        components: [
          { name: 'cards', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
    name: 'replaceDeck',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InventoryCardsCollection
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const inventoryCardsCollectionABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'cardsCollection_',
        internalType: 'contract CardsCollection',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'CallerNotInventory' },
  {
    type: 'error',
    inputs: [{ name: 'cardID', internalType: 'uint256', type: 'uint256' }],
    name: 'CardNotInInventory',
  },
  { type: 'error', inputs: [], name: 'TokenIsSoulbound' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cardsCollection',
    outputs: [
      { name: '', internalType: 'contract CardsCollection', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'inventory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Script
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const scriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vm',
    outputs: [{ name: '', internalType: 'contract Vm', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'reads', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'activeFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'allowCheatcodes',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'chainId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'clearMockedCalls',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'coinbase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'createFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'createSelectFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'difficulty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'etch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'fee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
    name: 'ffi',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: '',
        internalType: 'struct Vm.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isPersistent',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'record',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recordLogs',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'revertTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'roll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'transaction', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [{ name: '', internalType: 'string[2][]', type: 'string[2][]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'selectFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: '', internalType: 'uint8', type: 'uint8' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'snapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'store',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'warp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cardsCollectionABI}__.
 */
export function useCardsCollection(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cardsCollectionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__.
 */
export function useCardsCollectionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof cardsCollectionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cardsCollectionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    ...config,
  } as UseContractReadConfig<
    typeof cardsCollectionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCardsCollectionBalanceOf<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof cardsCollectionABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCardsCollectionGetApproved<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cardsCollectionABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof cardsCollectionABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCardsCollectionIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof cardsCollectionABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cardsCollectionABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof cardsCollectionABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"lore"`.
 */
export function useCardsCollectionLore<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'lore'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'lore', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'lore',
    ...config,
  } as UseContractReadConfig<typeof cardsCollectionABI, 'lore', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"name"`.
 */
export function useCardsCollectionName<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof cardsCollectionABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"owner"`.
 */
export function useCardsCollectionOwner<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof cardsCollectionABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCardsCollectionOwnerOf<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof cardsCollectionABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"stats"`.
 */
export function useCardsCollectionStats<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'stats'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'stats', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'stats',
    ...config,
  } as UseContractReadConfig<typeof cardsCollectionABI, 'stats', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCardsCollectionSupportsInterface<
  TSelectData = ReadContractResult<
    typeof cardsCollectionABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cardsCollectionABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof cardsCollectionABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"symbol"`.
 */
export function useCardsCollectionSymbol<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof cardsCollectionABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCardsCollectionTokenUri<
  TSelectData = ReadContractResult<typeof cardsCollectionABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cardsCollectionABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cardsCollectionABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof cardsCollectionABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__.
 */
export function useCardsCollectionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardsCollectionABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cardsCollectionABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cardsCollectionABI, TFunctionName>({
    abi: cardsCollectionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"approve"`.
 */
export function useCardsCollectionApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardsCollectionABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof cardsCollectionABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cardsCollectionABI, 'approve'>({
    abi: cardsCollectionABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"mint"`.
 */
export function useCardsCollectionMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cardsCollectionABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof cardsCollectionABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cardsCollectionABI, 'mint'>({
    abi: cardsCollectionABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCardsCollectionRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cardsCollectionABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof cardsCollectionABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cardsCollectionABI,
    'renounceOwnership'
  >({
    abi: cardsCollectionABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCardsCollectionSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cardsCollectionABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof cardsCollectionABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cardsCollectionABI, 'safeTransferFrom'>(
    {
      abi: cardsCollectionABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCardsCollectionSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cardsCollectionABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof cardsCollectionABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cardsCollectionABI,
    'setApprovalForAll'
  >({
    abi: cardsCollectionABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCardsCollectionTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cardsCollectionABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof cardsCollectionABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cardsCollectionABI, 'transferFrom'>({
    abi: cardsCollectionABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCardsCollectionTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cardsCollectionABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof cardsCollectionABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cardsCollectionABI,
    'transferOwnership'
  >({
    abi: cardsCollectionABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__.
 */
export function usePrepareCardsCollectionWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cardsCollectionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof cardsCollectionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCardsCollectionApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cardsCollectionABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cardsCollectionABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareCardsCollectionMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cardsCollectionABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cardsCollectionABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCardsCollectionRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cardsCollectionABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cardsCollectionABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCardsCollectionSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cardsCollectionABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cardsCollectionABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCardsCollectionSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cardsCollectionABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cardsCollectionABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCardsCollectionTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cardsCollectionABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cardsCollectionABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cardsCollectionABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCardsCollectionTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cardsCollectionABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cardsCollectionABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cardsCollectionABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardsCollectionABI}__.
 */
export function useCardsCollectionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof cardsCollectionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: cardsCollectionABI,
    ...config,
  } as UseContractEventConfig<typeof cardsCollectionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardsCollectionABI}__ and `eventName` set to `"Approval"`.
 */
export function useCardsCollectionApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof cardsCollectionABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cardsCollectionABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof cardsCollectionABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardsCollectionABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCardsCollectionApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof cardsCollectionABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cardsCollectionABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof cardsCollectionABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardsCollectionABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCardsCollectionOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof cardsCollectionABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cardsCollectionABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof cardsCollectionABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cardsCollectionABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCardsCollectionTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof cardsCollectionABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cardsCollectionABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof cardsCollectionABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link deployLocalABI}__.
 */
export function useDeployLocal(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: deployLocalABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployLocalABI}__.
 */
export function useDeployLocalRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof deployLocalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployLocalABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: deployLocalABI,
    ...config,
  } as UseContractReadConfig<typeof deployLocalABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployLocalABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useDeployLocalIsScript<
  TSelectData = ReadContractResult<typeof deployLocalABI, 'IS_SCRIPT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployLocalABI, 'IS_SCRIPT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: deployLocalABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof deployLocalABI, 'IS_SCRIPT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployLocalABI}__ and `functionName` set to `"vm"`.
 */
export function useDeployLocalVm<
  TSelectData = ReadContractResult<typeof deployLocalABI, 'vm'>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployLocalABI, 'vm', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: deployLocalABI,
    functionName: 'vm',
    ...config,
  } as UseContractReadConfig<typeof deployLocalABI, 'vm', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployLocalABI}__.
 */
export function useDeployLocalWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployLocalABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof deployLocalABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployLocalABI, TFunctionName>({
    abi: deployLocalABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployLocalABI}__ and `functionName` set to `"run"`.
 */
export function useDeployLocalRun<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployLocalABI, 'run'>['abi'],
        'run'
      > & { functionName?: 'run' }
    : UseContractWriteConfig<TMode, typeof deployLocalABI, 'run'> & {
        abi?: never
        functionName?: 'run'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployLocalABI, 'run'>({
    abi: deployLocalABI,
    functionName: 'run',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployLocalABI}__.
 */
export function usePrepareDeployLocalWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployLocalABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployLocalABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployLocalABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployLocalABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareDeployLocalRun(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployLocalABI, 'run'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployLocalABI,
    functionName: 'run',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployLocalABI, 'run'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link deployPublicABI}__.
 */
export function useDeployPublic(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: deployPublicABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployPublicABI}__.
 */
export function useDeployPublicRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof deployPublicABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployPublicABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: deployPublicABI,
    ...config,
  } as UseContractReadConfig<
    typeof deployPublicABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployPublicABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useDeployPublicIsScript<
  TSelectData = ReadContractResult<typeof deployPublicABI, 'IS_SCRIPT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployPublicABI, 'IS_SCRIPT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: deployPublicABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof deployPublicABI, 'IS_SCRIPT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployPublicABI}__ and `functionName` set to `"vm"`.
 */
export function useDeployPublicVm<
  TSelectData = ReadContractResult<typeof deployPublicABI, 'vm'>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployPublicABI, 'vm', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: deployPublicABI,
    functionName: 'vm',
    ...config,
  } as UseContractReadConfig<typeof deployPublicABI, 'vm', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployPublicABI}__.
 */
export function useDeployPublicWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployPublicABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof deployPublicABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployPublicABI, TFunctionName>({
    abi: deployPublicABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployPublicABI}__ and `functionName` set to `"run"`.
 */
export function useDeployPublicRun<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployPublicABI, 'run'>['abi'],
        'run'
      > & { functionName?: 'run' }
    : UseContractWriteConfig<TMode, typeof deployPublicABI, 'run'> & {
        abi?: never
        functionName?: 'run'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployPublicABI, 'run'>({
    abi: deployPublicABI,
    functionName: 'run',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployPublicABI}__.
 */
export function usePrepareDeployPublicWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployPublicABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployPublicABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployPublicABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployPublicABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareDeployPublicRun(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployPublicABI, 'run'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployPublicABI,
    functionName: 'run',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployPublicABI, 'run'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link gameABI}__.
 */
export function useGame(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: gameABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameABI}__.
 */
export function useGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof gameABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: gameABI, ...config } as UseContractReadConfig<
    typeof gameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"cardsCollection"`.
 */
export function useGameCardsCollection<
  TSelectData = ReadContractResult<typeof gameABI, 'cardsCollection'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gameABI, 'cardsCollection', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gameABI,
    functionName: 'cardsCollection',
    ...config,
  } as UseContractReadConfig<typeof gameABI, 'cardsCollection', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"inventory"`.
 */
export function useGameInventory<
  TSelectData = ReadContractResult<typeof gameABI, 'inventory'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gameABI, 'inventory', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gameABI,
    functionName: 'inventory',
    ...config,
  } as UseContractReadConfig<typeof gameABI, 'inventory', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"playerData"`.
 */
export function useGamePlayerData<
  TSelectData = ReadContractResult<typeof gameABI, 'playerData'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gameABI, 'playerData', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gameABI,
    functionName: 'playerData',
    ...config,
  } as UseContractReadConfig<typeof gameABI, 'playerData', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"playerDeck"`.
 */
export function useGamePlayerDeck<
  TSelectData = ReadContractResult<typeof gameABI, 'playerDeck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof gameABI, 'playerDeck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gameABI,
    functionName: 'playerDeck',
    ...config,
  } as UseContractReadConfig<typeof gameABI, 'playerDeck', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__.
 */
export function useGameWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof gameABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, TFunctionName>({
    abi: gameABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"attack"`.
 */
export function useGameAttack<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'attack'>['abi'],
        'attack'
      > & { functionName?: 'attack' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'attack'> & {
        abi?: never
        functionName?: 'attack'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'attack'>({
    abi: gameABI,
    functionName: 'attack',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"concedeGame"`.
 */
export function useGameConcedeGame<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'concedeGame'>['abi'],
        'concedeGame'
      > & { functionName?: 'concedeGame' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'concedeGame'> & {
        abi?: never
        functionName?: 'concedeGame'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'concedeGame'>({
    abi: gameABI,
    functionName: 'concedeGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"createGame"`.
 */
export function useGameCreateGame<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'createGame'>['abi'],
        'createGame'
      > & { functionName?: 'createGame' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'createGame'> & {
        abi?: never
        functionName?: 'createGame'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'createGame'>({
    abi: gameABI,
    functionName: 'createGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"declineGame"`.
 */
export function useGameDeclineGame<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'declineGame'>['abi'],
        'declineGame'
      > & { functionName?: 'declineGame' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'declineGame'> & {
        abi?: never
        functionName?: 'declineGame'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'declineGame'>({
    abi: gameABI,
    functionName: 'declineGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"defend"`.
 */
export function useGameDefend<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'defend'>['abi'],
        'defend'
      > & { functionName?: 'defend' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'defend'> & {
        abi?: never
        functionName?: 'defend'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'defend'>({
    abi: gameABI,
    functionName: 'defend',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"drawCard"`.
 */
export function useGameDrawCard<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'drawCard'>['abi'],
        'drawCard'
      > & { functionName?: 'drawCard' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'drawCard'> & {
        abi?: never
        functionName?: 'drawCard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'drawCard'>({
    abi: gameABI,
    functionName: 'drawCard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"joinGame"`.
 */
export function useGameJoinGame<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'joinGame'>['abi'],
        'joinGame'
      > & { functionName?: 'joinGame' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'joinGame'> & {
        abi?: never
        functionName?: 'joinGame'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'joinGame'>({
    abi: gameABI,
    functionName: 'joinGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"pass"`.
 */
export function useGamePass<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'pass'>['abi'],
        'pass'
      > & { functionName?: 'pass' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'pass'> & {
        abi?: never
        functionName?: 'pass'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'pass'>({
    abi: gameABI,
    functionName: 'pass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"playCard"`.
 */
export function useGamePlayCard<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof gameABI, 'playCard'>['abi'],
        'playCard'
      > & { functionName?: 'playCard' }
    : UseContractWriteConfig<TMode, typeof gameABI, 'playCard'> & {
        abi?: never
        functionName?: 'playCard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof gameABI, 'playCard'>({
    abi: gameABI,
    functionName: 'playCard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__.
 */
export function usePrepareGameWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"attack"`.
 */
export function usePrepareGameAttack(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'attack'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'attack',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'attack'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"concedeGame"`.
 */
export function usePrepareGameConcedeGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'concedeGame'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'concedeGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'concedeGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"createGame"`.
 */
export function usePrepareGameCreateGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'createGame'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'createGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'createGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"declineGame"`.
 */
export function usePrepareGameDeclineGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'declineGame'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'declineGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'declineGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"defend"`.
 */
export function usePrepareGameDefend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'defend'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'defend',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'defend'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"drawCard"`.
 */
export function usePrepareGameDrawCard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'drawCard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'drawCard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'drawCard'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"joinGame"`.
 */
export function usePrepareGameJoinGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'joinGame'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'joinGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'joinGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"pass"`.
 */
export function usePrepareGamePass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'pass'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'pass',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'pass'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameABI}__ and `functionName` set to `"playCard"`.
 */
export function usePrepareGamePlayCard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gameABI, 'playCard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: gameABI,
    functionName: 'playCard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gameABI, 'playCard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__.
 */
export function useGameEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof gameABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: gameABI, ...config } as UseContractEventConfig<
    typeof gameABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"CardDrawn"`.
 */
export function useGameCardDrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'CardDrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'CardDrawn',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'CardDrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"CardPlayed"`.
 */
export function useGameCardPlayedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'CardPlayed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'CardPlayed',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'CardPlayed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"Champion"`.
 */
export function useGameChampionEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'Champion'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'Champion',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'Champion'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"CreatureDestroyed"`.
 */
export function useGameCreatureDestroyedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'CreatureDestroyed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'CreatureDestroyed',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'CreatureDestroyed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"GameCreated"`.
 */
export function useGameGameCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'GameCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'GameCreated',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'GameCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"GameDeclined"`.
 */
export function useGameGameDeclinedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'GameDeclined'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'GameDeclined',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'GameDeclined'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"GameStarted"`.
 */
export function useGameGameStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'GameStarted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'GameStarted',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'GameStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"PlayerAttacked"`.
 */
export function useGamePlayerAttackedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'PlayerAttacked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'PlayerAttacked',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'PlayerAttacked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"PlayerConceded"`.
 */
export function useGamePlayerConcededEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'PlayerConceded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'PlayerConceded',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'PlayerConceded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"PlayerDefeated"`.
 */
export function useGamePlayerDefeatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'PlayerDefeated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'PlayerDefeated',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'PlayerDefeated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"PlayerDefended"`.
 */
export function useGamePlayerDefendedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'PlayerDefended'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'PlayerDefended',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'PlayerDefended'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"PlayerPassed"`.
 */
export function useGamePlayerPassedEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'PlayerPassed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'PlayerPassed',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'PlayerPassed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameABI}__ and `eventName` set to `"PlayerTimedOut"`.
 */
export function useGamePlayerTimedOutEvent(
  config: Omit<
    UseContractEventConfig<typeof gameABI, 'PlayerTimedOut'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: gameABI,
    eventName: 'PlayerTimedOut',
    ...config,
  } as UseContractEventConfig<typeof gameABI, 'PlayerTimedOut'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TSelectData = ReadContractResult<typeof erc721ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<
  TSelectData = ReadContractResult<typeof erc721ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link integrationABI}__.
 */
export function useIntegration(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: integrationABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationABI}__.
 */
export function useIntegrationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof integrationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof integrationABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationABI,
    ...config,
  } as UseContractReadConfig<typeof integrationABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useIntegrationIsScript<
  TSelectData = ReadContractResult<typeof integrationABI, 'IS_SCRIPT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof integrationABI, 'IS_SCRIPT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof integrationABI, 'IS_SCRIPT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useIntegrationIsTest<
  TSelectData = ReadContractResult<typeof integrationABI, 'IS_TEST'>,
>(
  config: Omit<
    UseContractReadConfig<typeof integrationABI, 'IS_TEST', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof integrationABI, 'IS_TEST', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"vm"`.
 */
export function useIntegrationVm<
  TSelectData = ReadContractResult<typeof integrationABI, 'vm'>,
>(
  config: Omit<
    UseContractReadConfig<typeof integrationABI, 'vm', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: integrationABI,
    functionName: 'vm',
    ...config,
  } as UseContractReadConfig<typeof integrationABI, 'vm', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationABI}__.
 */
export function useIntegrationWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof integrationABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof integrationABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof integrationABI, TFunctionName>({
    abi: integrationABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"failed"`.
 */
export function useIntegrationFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof integrationABI, 'failed'>['abi'],
        'failed'
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<TMode, typeof integrationABI, 'failed'> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof integrationABI, 'failed'>({
    abi: integrationABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"setUp"`.
 */
export function useIntegrationSetUp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof integrationABI, 'setUp'>['abi'],
        'setUp'
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<TMode, typeof integrationABI, 'setUp'> & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof integrationABI, 'setUp'>({
    abi: integrationABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"testGame"`.
 */
export function useIntegrationTestGame<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof integrationABI, 'testGame'>['abi'],
        'testGame'
      > & { functionName?: 'testGame' }
    : UseContractWriteConfig<TMode, typeof integrationABI, 'testGame'> & {
        abi?: never
        functionName?: 'testGame'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof integrationABI, 'testGame'>({
    abi: integrationABI,
    functionName: 'testGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationABI}__.
 */
export function usePrepareIntegrationWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareIntegrationFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationABI, 'failed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareIntegrationSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationABI, 'setUp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationABI, 'setUp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link integrationABI}__ and `functionName` set to `"testGame"`.
 */
export function usePrepareIntegrationTestGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof integrationABI, 'testGame'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: integrationABI,
    functionName: 'testGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof integrationABI, 'testGame'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__.
 */
export function useIntegrationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    ...config,
  } as UseContractEventConfig<typeof integrationABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log"`.
 */
export function useIntegrationLogEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_address"`.
 */
export function useIntegrationLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_array"`.
 */
export function useIntegrationLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useIntegrationLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useIntegrationLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_int"`.
 */
export function useIntegrationLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useIntegrationLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useIntegrationLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useIntegrationLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useIntegrationLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useIntegrationLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useIntegrationLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useIntegrationLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useIntegrationLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useIntegrationLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_string"`.
 */
export function useIntegrationLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"log_uint"`.
 */
export function useIntegrationLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link integrationABI}__ and `eventName` set to `"logs"`.
 */
export function useIntegrationLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof integrationABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: integrationABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof integrationABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link inventoryABI}__.
 */
export function useInventory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: inventoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryABI}__.
 */
export function useInventoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof inventoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof inventoryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryABI,
    ...config,
  } as UseContractReadConfig<typeof inventoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"cardsCollection"`.
 */
export function useInventoryCardsCollection<
  TSelectData = ReadContractResult<typeof inventoryABI, 'cardsCollection'>,
>(
  config: Omit<
    UseContractReadConfig<typeof inventoryABI, 'cardsCollection', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryABI,
    functionName: 'cardsCollection',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryABI,
    'cardsCollection',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"checkDeck"`.
 */
export function useInventoryCheckDeck<
  TSelectData = ReadContractResult<typeof inventoryABI, 'checkDeck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof inventoryABI, 'checkDeck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryABI,
    functionName: 'checkDeck',
    ...config,
  } as UseContractReadConfig<typeof inventoryABI, 'checkDeck', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"getDeck"`.
 */
export function useInventoryGetDeck<
  TSelectData = ReadContractResult<typeof inventoryABI, 'getDeck'>,
>(
  config: Omit<
    UseContractReadConfig<typeof inventoryABI, 'getDeck', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryABI,
    functionName: 'getDeck',
    ...config,
  } as UseContractReadConfig<typeof inventoryABI, 'getDeck', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"inventoryCardsCollection"`.
 */
export function useInventoryInventoryCardsCollection<
  TSelectData = ReadContractResult<
    typeof inventoryABI,
    'inventoryCardsCollection'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryABI,
      'inventoryCardsCollection',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryABI,
    functionName: 'inventoryCardsCollection',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryABI,
    'inventoryCardsCollection',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__.
 */
export function useInventoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof inventoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof inventoryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, TFunctionName>({
    abi: inventoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"addCard"`.
 */
export function useInventoryAddCard<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof inventoryABI, 'addCard'>['abi'],
        'addCard'
      > & { functionName?: 'addCard' }
    : UseContractWriteConfig<TMode, typeof inventoryABI, 'addCard'> & {
        abi?: never
        functionName?: 'addCard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, 'addCard'>({
    abi: inventoryABI,
    functionName: 'addCard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"addCardToDeck"`.
 */
export function useInventoryAddCardToDeck<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof inventoryABI, 'addCardToDeck'>['abi'],
        'addCardToDeck'
      > & { functionName?: 'addCardToDeck' }
    : UseContractWriteConfig<TMode, typeof inventoryABI, 'addCardToDeck'> & {
        abi?: never
        functionName?: 'addCardToDeck'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, 'addCardToDeck'>({
    abi: inventoryABI,
    functionName: 'addCardToDeck',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"addDeck"`.
 */
export function useInventoryAddDeck<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof inventoryABI, 'addDeck'>['abi'],
        'addDeck'
      > & { functionName?: 'addDeck' }
    : UseContractWriteConfig<TMode, typeof inventoryABI, 'addDeck'> & {
        abi?: never
        functionName?: 'addDeck'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, 'addDeck'>({
    abi: inventoryABI,
    functionName: 'addDeck',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"removeCard"`.
 */
export function useInventoryRemoveCard<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof inventoryABI, 'removeCard'>['abi'],
        'removeCard'
      > & { functionName?: 'removeCard' }
    : UseContractWriteConfig<TMode, typeof inventoryABI, 'removeCard'> & {
        abi?: never
        functionName?: 'removeCard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, 'removeCard'>({
    abi: inventoryABI,
    functionName: 'removeCard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"removeCardFromDeck"`.
 */
export function useInventoryRemoveCardFromDeck<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryABI,
          'removeCardFromDeck'
        >['abi'],
        'removeCardFromDeck'
      > & { functionName?: 'removeCardFromDeck' }
    : UseContractWriteConfig<
        TMode,
        typeof inventoryABI,
        'removeCardFromDeck'
      > & {
        abi?: never
        functionName?: 'removeCardFromDeck'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, 'removeCardFromDeck'>({
    abi: inventoryABI,
    functionName: 'removeCardFromDeck',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"removeDeck"`.
 */
export function useInventoryRemoveDeck<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof inventoryABI, 'removeDeck'>['abi'],
        'removeDeck'
      > & { functionName?: 'removeDeck' }
    : UseContractWriteConfig<TMode, typeof inventoryABI, 'removeDeck'> & {
        abi?: never
        functionName?: 'removeDeck'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, 'removeDeck'>({
    abi: inventoryABI,
    functionName: 'removeDeck',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"replaceDeck"`.
 */
export function useInventoryReplaceDeck<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof inventoryABI, 'replaceDeck'>['abi'],
        'replaceDeck'
      > & { functionName?: 'replaceDeck' }
    : UseContractWriteConfig<TMode, typeof inventoryABI, 'replaceDeck'> & {
        abi?: never
        functionName?: 'replaceDeck'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryABI, 'replaceDeck'>({
    abi: inventoryABI,
    functionName: 'replaceDeck',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__.
 */
export function usePrepareInventoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"addCard"`.
 */
export function usePrepareInventoryAddCard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, 'addCard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    functionName: 'addCard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, 'addCard'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"addCardToDeck"`.
 */
export function usePrepareInventoryAddCardToDeck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, 'addCardToDeck'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    functionName: 'addCardToDeck',
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, 'addCardToDeck'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"addDeck"`.
 */
export function usePrepareInventoryAddDeck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, 'addDeck'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    functionName: 'addDeck',
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, 'addDeck'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"removeCard"`.
 */
export function usePrepareInventoryRemoveCard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, 'removeCard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    functionName: 'removeCard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, 'removeCard'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"removeCardFromDeck"`.
 */
export function usePrepareInventoryRemoveCardFromDeck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, 'removeCardFromDeck'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    functionName: 'removeCardFromDeck',
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, 'removeCardFromDeck'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"removeDeck"`.
 */
export function usePrepareInventoryRemoveDeck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, 'removeDeck'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    functionName: 'removeDeck',
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, 'removeDeck'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryABI}__ and `functionName` set to `"replaceDeck"`.
 */
export function usePrepareInventoryReplaceDeck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryABI, 'replaceDeck'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryABI,
    functionName: 'replaceDeck',
    ...config,
  } as UsePrepareContractWriteConfig<typeof inventoryABI, 'replaceDeck'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryABI}__.
 */
export function useInventoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof inventoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryABI,
    ...config,
  } as UseContractEventConfig<typeof inventoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryABI}__ and `eventName` set to `"CardAdded"`.
 */
export function useInventoryCardAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryABI, 'CardAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryABI,
    eventName: 'CardAdded',
    ...config,
  } as UseContractEventConfig<typeof inventoryABI, 'CardAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryABI}__ and `eventName` set to `"CardAddedToDeck"`.
 */
export function useInventoryCardAddedToDeckEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryABI, 'CardAddedToDeck'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryABI,
    eventName: 'CardAddedToDeck',
    ...config,
  } as UseContractEventConfig<typeof inventoryABI, 'CardAddedToDeck'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryABI}__ and `eventName` set to `"CardRemoved"`.
 */
export function useInventoryCardRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryABI, 'CardRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryABI,
    eventName: 'CardRemoved',
    ...config,
  } as UseContractEventConfig<typeof inventoryABI, 'CardRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryABI}__ and `eventName` set to `"CardRemovedFromDeck"`.
 */
export function useInventoryCardRemovedFromDeckEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryABI, 'CardRemovedFromDeck'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryABI,
    eventName: 'CardRemovedFromDeck',
    ...config,
  } as UseContractEventConfig<typeof inventoryABI, 'CardRemovedFromDeck'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryABI}__ and `eventName` set to `"DeckAdded"`.
 */
export function useInventoryDeckAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryABI, 'DeckAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryABI,
    eventName: 'DeckAdded',
    ...config,
  } as UseContractEventConfig<typeof inventoryABI, 'DeckAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryABI}__ and `eventName` set to `"DeckRemoved"`.
 */
export function useInventoryDeckRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryABI, 'DeckRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryABI,
    eventName: 'DeckRemoved',
    ...config,
  } as UseContractEventConfig<typeof inventoryABI, 'DeckRemoved'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link inventoryCardsCollectionABI}__.
 */
export function useInventoryCardsCollection(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: inventoryCardsCollectionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__.
 */
export function useInventoryCardsCollectionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useInventoryCardsCollectionBalanceOf<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"cardsCollection"`.
 */
export function useInventoryCardsCollectionCardsCollection<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'cardsCollection'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'cardsCollection',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'cardsCollection',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'cardsCollection',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"getApproved"`.
 */
export function useInventoryCardsCollectionGetApproved<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'getApproved'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"inventory"`.
 */
export function useInventoryCardsCollectionInventory<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'inventory'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'inventory',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'inventory',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'inventory',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useInventoryCardsCollectionIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"name"`.
 */
export function useInventoryCardsCollectionName<
  TSelectData = ReadContractResult<typeof inventoryCardsCollectionABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useInventoryCardsCollectionOwnerOf<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'ownerOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'ownerOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useInventoryCardsCollectionSupportsInterface<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"symbol"`.
 */
export function useInventoryCardsCollectionSymbol<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'symbol'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useInventoryCardsCollectionTokenUri<
  TSelectData = ReadContractResult<
    typeof inventoryCardsCollectionABI,
    'tokenURI'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof inventoryCardsCollectionABI,
      'tokenURI',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: inventoryCardsCollectionABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof inventoryCardsCollectionABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__.
 */
export function useInventoryCardsCollectionWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryCardsCollectionABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof inventoryCardsCollectionABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof inventoryCardsCollectionABI,
    TFunctionName
  >({ abi: inventoryCardsCollectionABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"approve"`.
 */
export function useInventoryCardsCollectionApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryCardsCollectionABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof inventoryCardsCollectionABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryCardsCollectionABI, 'approve'>(
    {
      abi: inventoryCardsCollectionABI,
      functionName: 'approve',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"burn"`.
 */
export function useInventoryCardsCollectionBurn<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryCardsCollectionABI,
          'burn'
        >['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        TMode,
        typeof inventoryCardsCollectionABI,
        'burn'
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryCardsCollectionABI, 'burn'>({
    abi: inventoryCardsCollectionABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"mint"`.
 */
export function useInventoryCardsCollectionMint<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryCardsCollectionABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        TMode,
        typeof inventoryCardsCollectionABI,
        'mint'
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof inventoryCardsCollectionABI, 'mint'>({
    abi: inventoryCardsCollectionABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useInventoryCardsCollectionSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryCardsCollectionABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof inventoryCardsCollectionABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof inventoryCardsCollectionABI,
    'safeTransferFrom'
  >({
    abi: inventoryCardsCollectionABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useInventoryCardsCollectionSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryCardsCollectionABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof inventoryCardsCollectionABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof inventoryCardsCollectionABI,
    'setApprovalForAll'
  >({
    abi: inventoryCardsCollectionABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useInventoryCardsCollectionTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof inventoryCardsCollectionABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof inventoryCardsCollectionABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof inventoryCardsCollectionABI,
    'transferFrom'
  >({
    abi: inventoryCardsCollectionABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__.
 */
export function usePrepareInventoryCardsCollectionWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof inventoryCardsCollectionABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryCardsCollectionABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof inventoryCardsCollectionABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareInventoryCardsCollectionApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof inventoryCardsCollectionABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryCardsCollectionABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof inventoryCardsCollectionABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareInventoryCardsCollectionBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryCardsCollectionABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryCardsCollectionABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof inventoryCardsCollectionABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareInventoryCardsCollectionMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof inventoryCardsCollectionABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryCardsCollectionABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof inventoryCardsCollectionABI,
    'mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareInventoryCardsCollectionSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof inventoryCardsCollectionABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryCardsCollectionABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof inventoryCardsCollectionABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareInventoryCardsCollectionSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof inventoryCardsCollectionABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryCardsCollectionABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof inventoryCardsCollectionABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareInventoryCardsCollectionTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof inventoryCardsCollectionABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: inventoryCardsCollectionABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof inventoryCardsCollectionABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryCardsCollectionABI}__.
 */
export function useInventoryCardsCollectionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof inventoryCardsCollectionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryCardsCollectionABI,
    ...config,
  } as UseContractEventConfig<typeof inventoryCardsCollectionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `eventName` set to `"Approval"`.
 */
export function useInventoryCardsCollectionApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryCardsCollectionABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryCardsCollectionABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof inventoryCardsCollectionABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useInventoryCardsCollectionApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof inventoryCardsCollectionABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryCardsCollectionABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof inventoryCardsCollectionABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link inventoryCardsCollectionABI}__ and `eventName` set to `"Transfer"`.
 */
export function useInventoryCardsCollectionTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof inventoryCardsCollectionABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: inventoryCardsCollectionABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof inventoryCardsCollectionABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function useMulticall3(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: multicall3ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function useMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useMulticall3GetBasefee<
  TSelectData = ReadContractResult<typeof multicall3ABI, 'getBasefee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, 'getBasefee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, 'getBasefee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useMulticall3GetBlockHash<
  TSelectData = ReadContractResult<typeof multicall3ABI, 'getBlockHash'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, 'getBlockHash', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, 'getBlockHash', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useMulticall3GetBlockNumber<
  TSelectData = ReadContractResult<typeof multicall3ABI, 'getBlockNumber'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, 'getBlockNumber', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<
    typeof multicall3ABI,
    'getBlockNumber',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useMulticall3GetChainId<
  TSelectData = ReadContractResult<typeof multicall3ABI, 'getChainId'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, 'getChainId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, 'getChainId', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useMulticall3GetCurrentBlockCoinbase<
  TSelectData = ReadContractResult<
    typeof multicall3ABI,
    'getCurrentBlockCoinbase'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multicall3ABI,
      'getCurrentBlockCoinbase',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<
    typeof multicall3ABI,
    'getCurrentBlockCoinbase',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useMulticall3GetCurrentBlockDifficulty<
  TSelectData = ReadContractResult<
    typeof multicall3ABI,
    'getCurrentBlockDifficulty'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multicall3ABI,
      'getCurrentBlockDifficulty',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<
    typeof multicall3ABI,
    'getCurrentBlockDifficulty',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useMulticall3GetCurrentBlockGasLimit<
  TSelectData = ReadContractResult<
    typeof multicall3ABI,
    'getCurrentBlockGasLimit'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multicall3ABI,
      'getCurrentBlockGasLimit',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<
    typeof multicall3ABI,
    'getCurrentBlockGasLimit',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useMulticall3GetCurrentBlockTimestamp<
  TSelectData = ReadContractResult<
    typeof multicall3ABI,
    'getCurrentBlockTimestamp'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multicall3ABI,
      'getCurrentBlockTimestamp',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<
    typeof multicall3ABI,
    'getCurrentBlockTimestamp',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useMulticall3GetEthBalance<
  TSelectData = ReadContractResult<typeof multicall3ABI, 'getEthBalance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, 'getEthBalance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<
    typeof multicall3ABI,
    'getEthBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useMulticall3GetLastBlockHash<
  TSelectData = ReadContractResult<typeof multicall3ABI, 'getLastBlockHash'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multicall3ABI,
      'getLastBlockHash',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<
    typeof multicall3ABI,
    'getLastBlockHash',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function useMulticall3Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multicall3ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof multicall3ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicall3ABI, TFunctionName>({
    abi: multicall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useMulticall3Aggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multicall3ABI, 'aggregate'>['abi'],
        'aggregate'
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<TMode, typeof multicall3ABI, 'aggregate'> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicall3ABI, 'aggregate'>({
    abi: multicall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useMulticall3Aggregate3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multicall3ABI, 'aggregate3'>['abi'],
        'aggregate3'
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<TMode, typeof multicall3ABI, 'aggregate3'> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicall3ABI, 'aggregate3'>({
    abi: multicall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useMulticall3Aggregate3Value<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'aggregate3Value'
        >['abi'],
        'aggregate3Value'
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<TMode, typeof multicall3ABI, 'aggregate3Value'> & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicall3ABI, 'aggregate3Value'>({
    abi: multicall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useMulticall3BlockAndAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'blockAndAggregate'
        >['abi'],
        'blockAndAggregate'
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        TMode,
        typeof multicall3ABI,
        'blockAndAggregate'
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicall3ABI, 'blockAndAggregate'>({
    abi: multicall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useMulticall3TryAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multicall3ABI, 'tryAggregate'>['abi'],
        'tryAggregate'
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<TMode, typeof multicall3ABI, 'tryAggregate'> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicall3ABI, 'tryAggregate'>({
    abi: multicall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'tryBlockAndAggregate'
        >['abi'],
        'tryBlockAndAggregate'
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        TMode,
        typeof multicall3ABI,
        'tryBlockAndAggregate'
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicall3ABI, 'tryBlockAndAggregate'>({
    abi: multicall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function usePrepareMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'blockAndAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'tryBlockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multicall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TSelectData = ReadContractResult<typeof ownableABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link scriptABI}__.
 */
export function useScript(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: scriptABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__.
 */
export function useScriptRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof scriptABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof scriptABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: scriptABI, ...config } as UseContractReadConfig<
    typeof scriptABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useScriptIsScript<
  TSelectData = ReadContractResult<typeof scriptABI, 'IS_SCRIPT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof scriptABI, 'IS_SCRIPT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: scriptABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof scriptABI, 'IS_SCRIPT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__ and `functionName` set to `"vm"`.
 */
export function useScriptVm<
  TSelectData = ReadContractResult<typeof scriptABI, 'vm'>,
>(
  config: Omit<
    UseContractReadConfig<typeof scriptABI, 'vm', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: scriptABI,
    functionName: 'vm',
    ...config,
  } as UseContractReadConfig<typeof scriptABI, 'vm', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vmABI}__.
 */
export function useVm(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: vmABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof vmABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, TFunctionName>({
    abi: vmABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmAccesses<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'accesses'>['abi'],
        'accesses'
      > & { functionName?: 'accesses' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'accesses'> & {
        abi?: never
        functionName?: 'accesses'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'accesses'>({
    abi: vmABI,
    functionName: 'accesses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"activeFork"`.
 */
export function useVmActiveFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'activeFork'>['abi'],
        'activeFork'
      > & { functionName?: 'activeFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'activeFork'> & {
        abi?: never
        functionName?: 'activeFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'activeFork'>({
    abi: vmABI,
    functionName: 'activeFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"addr"`.
 */
export function useVmAddr<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'addr'>['abi'],
        'addr'
      > & { functionName?: 'addr' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'addr'> & {
        abi?: never
        functionName?: 'addr'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'addr'>({
    abi: vmABI,
    functionName: 'addr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function useVmAllowCheatcodes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'allowCheatcodes'>['abi'],
        'allowCheatcodes'
      > & { functionName?: 'allowCheatcodes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'allowCheatcodes'> & {
        abi?: never
        functionName?: 'allowCheatcodes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'allowCheatcodes'>({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"assume"`.
 */
export function useVmAssume<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'assume'>['abi'],
        'assume'
      > & { functionName?: 'assume' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'assume'> & {
        abi?: never
        functionName?: 'assume'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'assume'>({
    abi: vmABI,
    functionName: 'assume',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'broadcast'>['abi'],
        'broadcast'
      > & { functionName?: 'broadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'broadcast'> & {
        abi?: never
        functionName?: 'broadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'broadcast'>({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function useVmChainId<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'chainId'>['abi'],
        'chainId'
      > & { functionName?: 'chainId' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'chainId'> & {
        abi?: never
        functionName?: 'chainId'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'chainId'>({
    abi: vmABI,
    functionName: 'chainId',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function useVmClearMockedCalls<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'clearMockedCalls'>['abi'],
        'clearMockedCalls'
      > & { functionName?: 'clearMockedCalls' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'clearMockedCalls'> & {
        abi?: never
        functionName?: 'clearMockedCalls'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'clearMockedCalls'>({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmCloseFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'closeFile'>['abi'],
        'closeFile'
      > & { functionName?: 'closeFile' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'closeFile'> & {
        abi?: never
        functionName?: 'closeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'closeFile'>({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function useVmCoinbase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'coinbase'>['abi'],
        'coinbase'
      > & { functionName?: 'coinbase' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'coinbase'> & {
        abi?: never
        functionName?: 'coinbase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'coinbase'>({
    abi: vmABI,
    functionName: 'coinbase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function useVmCreateFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'createFork'>['abi'],
        'createFork'
      > & { functionName?: 'createFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'createFork'> & {
        abi?: never
        functionName?: 'createFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'createFork'>({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function useVmCreateSelectFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'createSelectFork'>['abi'],
        'createSelectFork'
      > & { functionName?: 'createSelectFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'createSelectFork'> & {
        abi?: never
        functionName?: 'createSelectFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'createSelectFork'>({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function useVmDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'deal'>['abi'],
        'deal'
      > & { functionName?: 'deal' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'deal'> & {
        abi?: never
        functionName?: 'deal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'deal'>({
    abi: vmABI,
    functionName: 'deal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deriveKey"`.
 */
export function useVmDeriveKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'deriveKey'>['abi'],
        'deriveKey'
      > & { functionName?: 'deriveKey' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'deriveKey'> & {
        abi?: never
        functionName?: 'deriveKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'deriveKey'>({
    abi: vmABI,
    functionName: 'deriveKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function useVmDifficulty<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'difficulty'>['abi'],
        'difficulty'
      > & { functionName?: 'difficulty' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'difficulty'> & {
        abi?: never
        functionName?: 'difficulty'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'difficulty'>({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envAddress"`.
 */
export function useVmEnvAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'envAddress'>['abi'],
        'envAddress'
      > & { functionName?: 'envAddress' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envAddress'> & {
        abi?: never
        functionName?: 'envAddress'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envAddress'>({
    abi: vmABI,
    functionName: 'envAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBool"`.
 */
export function useVmEnvBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'envBool'>['abi'],
        'envBool'
      > & { functionName?: 'envBool' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envBool'> & {
        abi?: never
        functionName?: 'envBool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envBool'>({
    abi: vmABI,
    functionName: 'envBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes"`.
 */
export function useVmEnvBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'envBytes'>['abi'],
        'envBytes'
      > & { functionName?: 'envBytes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envBytes'> & {
        abi?: never
        functionName?: 'envBytes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envBytes'>({
    abi: vmABI,
    functionName: 'envBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes32"`.
 */
export function useVmEnvBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'envBytes32'>['abi'],
        'envBytes32'
      > & { functionName?: 'envBytes32' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envBytes32'> & {
        abi?: never
        functionName?: 'envBytes32'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envBytes32'>({
    abi: vmABI,
    functionName: 'envBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envInt"`.
 */
export function useVmEnvInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'envInt'>['abi'],
        'envInt'
      > & { functionName?: 'envInt' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envInt'> & {
        abi?: never
        functionName?: 'envInt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envInt'>({
    abi: vmABI,
    functionName: 'envInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envString"`.
 */
export function useVmEnvString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'envString'>['abi'],
        'envString'
      > & { functionName?: 'envString' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envString'> & {
        abi?: never
        functionName?: 'envString'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envString'>({
    abi: vmABI,
    functionName: 'envString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envUint"`.
 */
export function useVmEnvUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'envUint'>['abi'],
        'envUint'
      > & { functionName?: 'envUint' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envUint'> & {
        abi?: never
        functionName?: 'envUint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envUint'>({
    abi: vmABI,
    functionName: 'envUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function useVmEtch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'etch'>['abi'],
        'etch'
      > & { functionName?: 'etch' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'etch'> & {
        abi?: never
        functionName?: 'etch'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'etch'>({
    abi: vmABI,
    functionName: 'etch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function useVmExpectCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'expectCall'>['abi'],
        'expectCall'
      > & { functionName?: 'expectCall' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectCall'> & {
        abi?: never
        functionName?: 'expectCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectCall'>({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function useVmExpectEmit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'expectEmit'>['abi'],
        'expectEmit'
      > & { functionName?: 'expectEmit' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectEmit'> & {
        abi?: never
        functionName?: 'expectEmit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectEmit'>({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function useVmExpectRevert<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'expectRevert'>['abi'],
        'expectRevert'
      > & { functionName?: 'expectRevert' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectRevert'> & {
        abi?: never
        functionName?: 'expectRevert'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectRevert'>({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function useVmFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'fee'>['abi'],
        'fee'
      > & { functionName?: 'fee' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'fee'> & {
        abi?: never
        functionName?: 'fee'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'fee'>({
    abi: vmABI,
    functionName: 'fee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmFfi<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'ffi'>['abi'],
        'ffi'
      > & { functionName?: 'ffi' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'ffi'> & {
        abi?: never
        functionName?: 'ffi'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'ffi'>({
    abi: vmABI,
    functionName: 'ffi',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getCode"`.
 */
export function useVmGetCode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'getCode'>['abi'],
        'getCode'
      > & { functionName?: 'getCode' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'getCode'> & {
        abi?: never
        functionName?: 'getCode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'getCode'>({
    abi: vmABI,
    functionName: 'getCode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function useVmGetDeployedCode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'getDeployedCode'>['abi'],
        'getDeployedCode'
      > & { functionName?: 'getDeployedCode' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'getDeployedCode'> & {
        abi?: never
        functionName?: 'getDeployedCode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'getDeployedCode'>({
    abi: vmABI,
    functionName: 'getDeployedCode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmGetNonce<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'getNonce'>['abi'],
        'getNonce'
      > & { functionName?: 'getNonce' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'getNonce'> & {
        abi?: never
        functionName?: 'getNonce'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'getNonce'>({
    abi: vmABI,
    functionName: 'getNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmGetRecordedLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'getRecordedLogs'>['abi'],
        'getRecordedLogs'
      > & { functionName?: 'getRecordedLogs' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'getRecordedLogs'> & {
        abi?: never
        functionName?: 'getRecordedLogs'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'getRecordedLogs'>({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isPersistent"`.
 */
export function useVmIsPersistent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'isPersistent'>['abi'],
        'isPersistent'
      > & { functionName?: 'isPersistent' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'isPersistent'> & {
        abi?: never
        functionName?: 'isPersistent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'isPersistent'>({
    abi: vmABI,
    functionName: 'isPersistent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function useVmLabel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'label'>['abi'],
        'label'
      > & { functionName?: 'label' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'label'> & {
        abi?: never
        functionName?: 'label'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'label'>({
    abi: vmABI,
    functionName: 'label',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"load"`.
 */
export function useVmLoad<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'load'>['abi'],
        'load'
      > & { functionName?: 'load' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'load'> & {
        abi?: never
        functionName?: 'load'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'load'>({
    abi: vmABI,
    functionName: 'load',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function useVmMakePersistent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'makePersistent'>['abi'],
        'makePersistent'
      > & { functionName?: 'makePersistent' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'makePersistent'> & {
        abi?: never
        functionName?: 'makePersistent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'makePersistent'>({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function useVmMockCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'mockCall'>['abi'],
        'mockCall'
      > & { functionName?: 'mockCall' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'mockCall'> & {
        abi?: never
        functionName?: 'mockCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'mockCall'>({
    abi: vmABI,
    functionName: 'mockCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseAddress"`.
 */
export function useVmParseAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseAddress'>['abi'],
        'parseAddress'
      > & { functionName?: 'parseAddress' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseAddress'> & {
        abi?: never
        functionName?: 'parseAddress'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseAddress'>({
    abi: vmABI,
    functionName: 'parseAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBool"`.
 */
export function useVmParseBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseBool'>['abi'],
        'parseBool'
      > & { functionName?: 'parseBool' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseBool'> & {
        abi?: never
        functionName?: 'parseBool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseBool'>({
    abi: vmABI,
    functionName: 'parseBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes"`.
 */
export function useVmParseBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseBytes'>['abi'],
        'parseBytes'
      > & { functionName?: 'parseBytes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseBytes'> & {
        abi?: never
        functionName?: 'parseBytes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseBytes'>({
    abi: vmABI,
    functionName: 'parseBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function useVmParseBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseBytes32'>['abi'],
        'parseBytes32'
      > & { functionName?: 'parseBytes32' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseBytes32'> & {
        abi?: never
        functionName?: 'parseBytes32'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseBytes32'>({
    abi: vmABI,
    functionName: 'parseBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseInt"`.
 */
export function useVmParseInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseInt'>['abi'],
        'parseInt'
      > & { functionName?: 'parseInt' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseInt'> & {
        abi?: never
        functionName?: 'parseInt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseInt'>({
    abi: vmABI,
    functionName: 'parseInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJson"`.
 */
export function useVmParseJson<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJson'>['abi'],
        'parseJson'
      > & { functionName?: 'parseJson' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJson'> & {
        abi?: never
        functionName?: 'parseJson'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJson'>({
    abi: vmABI,
    functionName: 'parseJson',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseUint"`.
 */
export function useVmParseUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseUint'>['abi'],
        'parseUint'
      > & { functionName?: 'parseUint' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseUint'> & {
        abi?: never
        functionName?: 'parseUint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseUint'>({
    abi: vmABI,
    functionName: 'parseUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function useVmPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'prank'>['abi'],
        'prank'
      > & { functionName?: 'prank' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'prank'> & {
        abi?: never
        functionName?: 'prank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'prank'>({
    abi: vmABI,
    functionName: 'prank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"projectRoot"`.
 */
export function useVmProjectRoot<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'projectRoot'>['abi'],
        'projectRoot'
      > & { functionName?: 'projectRoot' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'projectRoot'> & {
        abi?: never
        functionName?: 'projectRoot'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'projectRoot'>({
    abi: vmABI,
    functionName: 'projectRoot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFile"`.
 */
export function useVmReadFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'readFile'>['abi'],
        'readFile'
      > & { functionName?: 'readFile' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'readFile'> & {
        abi?: never
        functionName?: 'readFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'readFile'>({
    abi: vmABI,
    functionName: 'readFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function useVmReadFileBinary<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'readFileBinary'>['abi'],
        'readFileBinary'
      > & { functionName?: 'readFileBinary' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'readFileBinary'> & {
        abi?: never
        functionName?: 'readFileBinary'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'readFileBinary'>({
    abi: vmABI,
    functionName: 'readFileBinary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readLine"`.
 */
export function useVmReadLine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'readLine'>['abi'],
        'readLine'
      > & { functionName?: 'readLine' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'readLine'> & {
        abi?: never
        functionName?: 'readLine'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'readLine'>({
    abi: vmABI,
    functionName: 'readLine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function useVmRecord<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'record'>['abi'],
        'record'
      > & { functionName?: 'record' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'record'> & {
        abi?: never
        functionName?: 'record'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'record'>({
    abi: vmABI,
    functionName: 'record',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmRecordLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'recordLogs'>['abi'],
        'recordLogs'
      > & { functionName?: 'recordLogs' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'recordLogs'> & {
        abi?: never
        functionName?: 'recordLogs'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'recordLogs'>({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmRememberKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'rememberKey'>['abi'],
        'rememberKey'
      > & { functionName?: 'rememberKey' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rememberKey'> & {
        abi?: never
        functionName?: 'rememberKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rememberKey'>({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmRemoveFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'removeFile'>['abi'],
        'removeFile'
      > & { functionName?: 'removeFile' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'removeFile'> & {
        abi?: never
        functionName?: 'removeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'removeFile'>({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function useVmRevertTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'revertTo'>['abi'],
        'revertTo'
      > & { functionName?: 'revertTo' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'revertTo'> & {
        abi?: never
        functionName?: 'revertTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'revertTo'>({
    abi: vmABI,
    functionName: 'revertTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function useVmRevokePersistent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'revokePersistent'>['abi'],
        'revokePersistent'
      > & { functionName?: 'revokePersistent' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'revokePersistent'> & {
        abi?: never
        functionName?: 'revokePersistent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'revokePersistent'>({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function useVmRoll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'roll'>['abi'],
        'roll'
      > & { functionName?: 'roll' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'roll'> & {
        abi?: never
        functionName?: 'roll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'roll'>({
    abi: vmABI,
    functionName: 'roll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function useVmRollFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'rollFork'>['abi'],
        'rollFork'
      > & { functionName?: 'rollFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rollFork'> & {
        abi?: never
        functionName?: 'rollFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rollFork'>({
    abi: vmABI,
    functionName: 'rollFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function useVmRpcUrl<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'rpcUrl'>['abi'],
        'rpcUrl'
      > & { functionName?: 'rpcUrl' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rpcUrl'> & {
        abi?: never
        functionName?: 'rpcUrl'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rpcUrl'>({
    abi: vmABI,
    functionName: 'rpcUrl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function useVmRpcUrls<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'rpcUrls'>['abi'],
        'rpcUrls'
      > & { functionName?: 'rpcUrls' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rpcUrls'> & {
        abi?: never
        functionName?: 'rpcUrls'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rpcUrls'>({
    abi: vmABI,
    functionName: 'rpcUrls',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function useVmSelectFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'selectFork'>['abi'],
        'selectFork'
      > & { functionName?: 'selectFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'selectFork'> & {
        abi?: never
        functionName?: 'selectFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'selectFork'>({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSetEnv<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'setEnv'>['abi'],
        'setEnv'
      > & { functionName?: 'setEnv' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'setEnv'> & {
        abi?: never
        functionName?: 'setEnv'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'setEnv'>({
    abi: vmABI,
    functionName: 'setEnv',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function useVmSetNonce<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'setNonce'>['abi'],
        'setNonce'
      > & { functionName?: 'setNonce' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'setNonce'> & {
        abi?: never
        functionName?: 'setNonce'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'setNonce'>({
    abi: vmABI,
    functionName: 'setNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSign<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'sign'>['abi'],
        'sign'
      > & { functionName?: 'sign' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'sign'> & {
        abi?: never
        functionName?: 'sign'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'sign'>({
    abi: vmABI,
    functionName: 'sign',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function useVmSnapshot<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'snapshot'>['abi'],
        'snapshot'
      > & { functionName?: 'snapshot' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'snapshot'> & {
        abi?: never
        functionName?: 'snapshot'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'snapshot'>({
    abi: vmABI,
    functionName: 'snapshot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmStartBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'startBroadcast'>['abi'],
        'startBroadcast'
      > & { functionName?: 'startBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'startBroadcast'> & {
        abi?: never
        functionName?: 'startBroadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'startBroadcast'>({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function useVmStartPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'startPrank'>['abi'],
        'startPrank'
      > & { functionName?: 'startPrank' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'startPrank'> & {
        abi?: never
        functionName?: 'startPrank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'startPrank'>({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmStopBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'stopBroadcast'>['abi'],
        'stopBroadcast'
      > & { functionName?: 'stopBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'stopBroadcast'> & {
        abi?: never
        functionName?: 'stopBroadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'stopBroadcast'>({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function useVmStopPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'stopPrank'>['abi'],
        'stopPrank'
      > & { functionName?: 'stopPrank' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'stopPrank'> & {
        abi?: never
        functionName?: 'stopPrank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'stopPrank'>({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function useVmStore<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'store'>['abi'],
        'store'
      > & { functionName?: 'store' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'store'> & {
        abi?: never
        functionName?: 'store'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'store'>({
    abi: vmABI,
    functionName: 'store',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"toString"`.
 */
export function useVmToString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'toString'>['abi'],
        'toString'
      > & { functionName?: 'toString' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'toString'> & {
        abi?: never
        functionName?: 'toString'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'toString'>({
    abi: vmABI,
    functionName: 'toString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function useVmTransact<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'transact'>['abi'],
        'transact'
      > & { functionName?: 'transact' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'transact'> & {
        abi?: never
        functionName?: 'transact'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'transact'>({
    abi: vmABI,
    functionName: 'transact',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function useVmWarp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'warp'>['abi'],
        'warp'
      > & { functionName?: 'warp' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'warp'> & {
        abi?: never
        functionName?: 'warp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'warp'>({
    abi: vmABI,
    functionName: 'warp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmWriteFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeFile'>['abi'],
        'writeFile'
      > & { functionName?: 'writeFile' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeFile'> & {
        abi?: never
        functionName?: 'writeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeFile'>({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmWriteFileBinary<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeFileBinary'>['abi'],
        'writeFileBinary'
      > & { functionName?: 'writeFileBinary' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeFileBinary'> & {
        abi?: never
        functionName?: 'writeFileBinary'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeFileBinary'>({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmWriteLine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeLine'>['abi'],
        'writeLine'
      > & { functionName?: 'writeLine' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeLine'> & {
        abi?: never
        functionName?: 'writeLine'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeLine'>({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function usePrepareVmWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmAccesses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'accesses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'accesses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'accesses'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"activeFork"`.
 */
export function usePrepareVmActiveFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'activeFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'activeFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'activeFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"addr"`.
 */
export function usePrepareVmAddr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'addr'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'addr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'addr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function usePrepareVmAllowCheatcodes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"assume"`.
 */
export function usePrepareVmAssume(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'assume'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'assume',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'assume'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'broadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'broadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function usePrepareVmChainId(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'chainId'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'chainId',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'chainId'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function usePrepareVmClearMockedCalls(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmCloseFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'closeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'closeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function usePrepareVmCoinbase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'coinbase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'coinbase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'coinbase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function usePrepareVmCreateFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'createFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function usePrepareVmCreateSelectFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function usePrepareVmDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'deal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'deal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'deal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deriveKey"`.
 */
export function usePrepareVmDeriveKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'deriveKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'deriveKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'deriveKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function usePrepareVmDifficulty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'difficulty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'difficulty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envAddress"`.
 */
export function usePrepareVmEnvAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBool"`.
 */
export function usePrepareVmEnvBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes"`.
 */
export function usePrepareVmEnvBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes32"`.
 */
export function usePrepareVmEnvBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envInt"`.
 */
export function usePrepareVmEnvInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envString"`.
 */
export function usePrepareVmEnvString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envUint"`.
 */
export function usePrepareVmEnvUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function usePrepareVmEtch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'etch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'etch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'etch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function usePrepareVmExpectCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function usePrepareVmExpectEmit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectEmit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectEmit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function usePrepareVmExpectRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function usePrepareVmFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'fee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'fee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'fee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmFfi(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'ffi'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'ffi',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'ffi'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getCode"`.
 */
export function usePrepareVmGetCode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'getCode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getCode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getCode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function usePrepareVmGetDeployedCode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'getDeployedCode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getDeployedCode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getDeployedCode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getNonce"`.
 */
export function usePrepareVmGetNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'getNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getNonce'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmGetRecordedLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isPersistent"`.
 */
export function usePrepareVmIsPersistent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'isPersistent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'isPersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'isPersistent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmLabel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'label'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'label',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'label'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"load"`.
 */
export function usePrepareVmLoad(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'load'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'load',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'load'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function usePrepareVmMakePersistent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function usePrepareVmMockCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'mockCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'mockCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'mockCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseAddress"`.
 */
export function usePrepareVmParseAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBool"`.
 */
export function usePrepareVmParseBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes"`.
 */
export function usePrepareVmParseBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function usePrepareVmParseBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseInt"`.
 */
export function usePrepareVmParseInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJson"`.
 */
export function usePrepareVmParseJson(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJson'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJson',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJson'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseUint"`.
 */
export function usePrepareVmParseUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function usePrepareVmPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'prank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'prank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'prank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"projectRoot"`.
 */
export function usePrepareVmProjectRoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'projectRoot'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'projectRoot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'projectRoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFile"`.
 */
export function usePrepareVmReadFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'readFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'readFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'readFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function usePrepareVmReadFileBinary(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'readFileBinary'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'readFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'readFileBinary'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readLine"`.
 */
export function usePrepareVmReadLine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'readLine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'readLine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'readLine'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmRecord(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'record'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'record',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'record'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmRecordLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'recordLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'recordLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmRememberKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmRemoveFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'removeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'removeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function usePrepareVmRevertTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'revertTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revertTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'revertTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function usePrepareVmRevokePersistent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function usePrepareVmRoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'roll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'roll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'roll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function usePrepareVmRollFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rollFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rollFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rollFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function usePrepareVmRpcUrl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rpcUrl'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rpcUrl',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rpcUrl'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function usePrepareVmRpcUrls(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rpcUrls'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rpcUrls',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rpcUrls'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function usePrepareVmSelectFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'selectFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'selectFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSetEnv(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'setEnv'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setEnv',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'setEnv'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function usePrepareVmSetNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'setNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'setNonce'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sign"`.
 */
export function usePrepareVmSign(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'sign'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'sign',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'sign'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function usePrepareVmSnapshot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'snapshot'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'snapshot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'snapshot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmStartBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function usePrepareVmStartPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'startPrank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'startPrank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmStopBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function usePrepareVmStopPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'stopPrank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'stopPrank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareVmStore(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'store'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'store',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'store'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"toString"`.
 */
export function usePrepareVmToString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'toString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'toString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'toString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function usePrepareVmTransact(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'transact'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'transact',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'transact'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function usePrepareVmWarp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'warp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'warp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'warp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmWriteFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmWriteFileBinary(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmWriteLine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeLine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeLine'>)
}
